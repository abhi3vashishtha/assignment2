// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_CLIENTMESSAGE_H_
#define FLATBUFFERS_GENERATED_CLIENT_CLIENTMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Clientmessage {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct ClientCollection;
struct ClientCollectionBuilder;

enum ClientType : int8_t {
  ClientType_Person = 0,
  ClientType_Group = 1,
  ClientType_MIN = ClientType_Person,
  ClientType_MAX = ClientType_Group
};

inline const ClientType (&EnumValuesClientType())[2] {
  static const ClientType values[] = {
    ClientType_Person,
    ClientType_Group
  };
  return values;
}

inline const char * const *EnumNamesClientType() {
  static const char * const names[3] = {
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientType(ClientType e) {
  if (::flatbuffers::IsOutRange(e, ClientType_Person, ClientType_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClientType()[index];
}

enum Gender : int8_t {
  Gender_Male = 0,
  Gender_Female = 1,
  Gender_MIN = Gender_Male,
  Gender_MAX = Gender_Female
};

inline const Gender (&EnumValuesGender())[2] {
  static const Gender values[] = {
    Gender_Male,
    Gender_Female
  };
  return values;
}

inline const char * const *EnumNamesGender() {
  static const char * const names[3] = {
    "Male",
    "Female",
    nullptr
  };
  return names;
}

inline const char *EnumNameGender(Gender e) {
  if (::flatbuffers::IsOutRange(e, Gender_Male, Gender_Female)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGender()[index];
}

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int8_t age() const {
    return GetField<int8_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  Clientmessage::Gender gender() const {
    return static_cast<Clientmessage::Gender>(GetField<int8_t>(VT_GENDER, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_AGE, 1) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<int8_t>(verifier, VT_GENDER, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int8_t age) {
    fbb_.AddElement<int8_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(Clientmessage::Gender gender) {
    fbb_.AddElement<int8_t>(Person::VT_GENDER, static_cast<int8_t>(gender), 0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int8_t age = 0,
    float weight = 0.0f,
    Clientmessage::Gender gender = Clientmessage::Gender_Male) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_gender(gender);
  builder_.add_age(age);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int8_t age = 0,
    float weight = 0.0f,
    Clientmessage::Gender gender = Clientmessage::Gender_Male) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Clientmessage::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUP_NAME = 4,
    VT_AVG_AGE = 6,
    VT_AVG_WEIGHT = 8,
    VT_NAMES = 10
  };
  const ::flatbuffers::String *group_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUP_NAME);
  }
  float avg_age() const {
    return GetField<float>(VT_AVG_AGE, 0.0f);
  }
  float avg_weight() const {
    return GetField<float>(VT_AVG_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUP_NAME) &&
           verifier.VerifyString(group_name()) &&
           VerifyField<float>(verifier, VT_AVG_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVG_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfStrings(names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_group_name(::flatbuffers::Offset<::flatbuffers::String> group_name) {
    fbb_.AddOffset(Group::VT_GROUP_NAME, group_name);
  }
  void add_avg_age(float avg_age) {
    fbb_.AddElement<float>(Group::VT_AVG_AGE, avg_age, 0.0f);
  }
  void add_avg_weight(float avg_weight) {
    fbb_.AddElement<float>(Group::VT_AVG_WEIGHT, avg_weight, 0.0f);
  }
  void add_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names) {
    fbb_.AddOffset(Group::VT_NAMES, names);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> group_name = 0,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_names(names);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_group_name(group_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *group_name = nullptr,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *names = nullptr) {
  auto group_name__ = group_name ? _fbb.CreateString(group_name) : 0;
  auto names__ = names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*names) : 0;
  return Clientmessage::CreateGroup(
      _fbb,
      group_name__,
      avg_age,
      avg_weight,
      names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TYPE = 4,
    VT_PERSON = 6,
    VT_GROUP = 8
  };
  Clientmessage::ClientType client_type() const {
    return static_cast<Clientmessage::ClientType>(GetField<int8_t>(VT_CLIENT_TYPE, 0));
  }
  const Clientmessage::Person *person() const {
    return GetPointer<const Clientmessage::Person *>(VT_PERSON);
  }
  const Clientmessage::Group *group() const {
    return GetPointer<const Clientmessage::Group *>(VT_GROUP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CLIENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_PERSON) &&
           verifier.VerifyTable(person()) &&
           VerifyOffset(verifier, VT_GROUP) &&
           verifier.VerifyTable(group()) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_type(Clientmessage::ClientType client_type) {
    fbb_.AddElement<int8_t>(Client::VT_CLIENT_TYPE, static_cast<int8_t>(client_type), 0);
  }
  void add_person(::flatbuffers::Offset<Clientmessage::Person> person) {
    fbb_.AddOffset(Client::VT_PERSON, person);
  }
  void add_group(::flatbuffers::Offset<Clientmessage::Group> group) {
    fbb_.AddOffset(Client::VT_GROUP, group);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Clientmessage::ClientType client_type = Clientmessage::ClientType_Person,
    ::flatbuffers::Offset<Clientmessage::Person> person = 0,
    ::flatbuffers::Offset<Clientmessage::Group> group = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_group(group);
  builder_.add_person(person);
  builder_.add_client_type(client_type);
  return builder_.Finish();
}

struct ClientCollection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Clientmessage::Client>> *clients() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Clientmessage::Client>> *>(VT_CLIENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct ClientCollectionBuilder {
  typedef ClientCollection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clients(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Clientmessage::Client>>> clients) {
    fbb_.AddOffset(ClientCollection::VT_CLIENTS, clients);
  }
  explicit ClientCollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClientCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClientCollection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClientCollection> CreateClientCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Clientmessage::Client>>> clients = 0) {
  ClientCollectionBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ClientCollection> CreateClientCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Clientmessage::Client>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVector<::flatbuffers::Offset<Clientmessage::Client>>(*clients) : 0;
  return Clientmessage::CreateClientCollection(
      _fbb,
      clients__);
}

inline const Clientmessage::ClientCollection *GetClientCollection(const void *buf) {
  return ::flatbuffers::GetRoot<Clientmessage::ClientCollection>(buf);
}

inline const Clientmessage::ClientCollection *GetSizePrefixedClientCollection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Clientmessage::ClientCollection>(buf);
}

inline bool VerifyClientCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Clientmessage::ClientCollection>(nullptr);
}

inline bool VerifySizePrefixedClientCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Clientmessage::ClientCollection>(nullptr);
}

inline void FinishClientCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Clientmessage::ClientCollection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Clientmessage::ClientCollection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Clientmessage

#endif  // FLATBUFFERS_GENERATED_CLIENT_CLIENTMESSAGE_H_
